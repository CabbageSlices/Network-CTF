#include "Collision.h"
#include "LineSegment.h"
#include "math.h"
#include "Bullet.h"
#include "userPlayer.h"
#include "Portal.h"
#include "Block.h"
#include "GunGiver.h"
#include <cmath>

using std::vector;
using std::tr1::shared_ptr;
using std::min;
using std::abs;

template<class Static>
void playerStaticCollision(UserPlayer& player, std::vector<std::tr1::shared_ptr<Static> >& statics,
                            std::function<void(UserPlayer& player, std::tr1::shared_ptr<Static>& staticObj)> collisionResponse) {

    for(auto staticObj : statics) {

        if(player.getDestinationBox().intersects(staticObj->getCollisionBox() )) {

            collisionResponse(player, staticObj);
        }
    }
}

bool checkCollision(const sf::FloatRect& rect, shared_ptr<LineSegment> line, sf::Vector2f& collisionPoint) {

    //find the point of intersection that is the nearest to the origin of the line because this point would be the first point of collision
    //set default nearest intersection point to the end point of the line because thats the farthest it can go to have an intersection
    sf::Vector2f nearestIntersectionPoint = line->getEndPoint();
    bool intersects = false;

    //top edge
    if(handleEdgeCollision(sf::Vector2f(rect.left, rect.top), sf::Vector2f(rect.left + rect.width, rect.top), line, nearestIntersectionPoint)) {

        intersects = true;
    }

    //left edge
    if(handleEdgeCollision(sf::Vector2f(rect.left, rect.top), sf::Vector2f(rect.left, rect.top + rect.height), line, nearestIntersectionPoint)) {

        intersects = true;
    }

    //right edge
    if(handleEdgeCollision(sf::Vector2f(rect.left + rect.width, rect.top), sf::Vector2f(rect.left + rect.width, rect.top + rect.height), line, nearestIntersectionPoint)) {

        intersects = true;
    }

    //bottom
    if(handleEdgeCollision(sf::Vector2f(rect.left, rect.top + rect.height), sf::Vector2f(rect.left + rect.width, rect.top + rect.height), line, nearestIntersectionPoint)) {

        intersects = true;
    }

    collisionPoint = nearestIntersectionPoint;
    return intersects;
}

bool handleEdgeCollision(const sf::Vector2f& edgeBegin, const sf::Vector2f& edgeEnd, shared_ptr<LineSegment> line, sf::Vector2f& nearestIntersectionPoint) {

    shared_ptr<LineSegment> edge = createLine(edgeBegin, edgeEnd);

    sf::Vector2f collisionPoint(0, 0);

    if(line->intersects(*edge, collisionPoint)) {

        if(distanceToPoint(line->getStartPoint(), collisionPoint) < distanceToPoint(line->getStartPoint(), nearestIntersectionPoint)) {

            nearestIntersectionPoint = collisionPoint;
        }

        return true;
    }

    return false;
}

sf::Vector2f calculateCollisionOffset(const sf::FloatRect& rectToMove, const sf::FloatRect& staticRect) {

    //determine the distance required for the first rectangle to move in each direction in order to escape collision
    ///moveLeft and moveUp are always negative because this offset is added to rectToMoves current position in order to move it
    ///and in order to move left you have to subtract from its current position and the only way to do that is to add a negative
    float moveRight = staticRect.left + staticRect.width - rectToMove.left;
    float moveLeft = staticRect.left - (rectToMove.left + rectToMove.width);
    float moveUp = staticRect.top - (rectToMove.top + rectToMove.height);
    float moveDown = staticRect.top + staticRect.height - rectToMove.top;

    //now determine what the shortest distance to move is
    float shortestHorizontal = moveRight < abs(moveLeft) ? moveRight : moveLeft;
    float shortestVertical = moveDown < abs(moveUp) ? moveDown : moveUp;

    //now determine whether he needs to move on the horizontal axis or verticla axis
    sf::Vector2f movementOffset(0, 0);

    if(abs(shortestHorizontal) < abs(shortestVertical)) {

        movementOffset.x = shortestHorizontal;
    } else if(abs(shortestVertical) < abs(shortestHorizontal)) {

        movementOffset.y = shortestVertical;
    } else {

        //both horizontal and vertical movement distances are the same so he needs to move both horizontally and vertically because its a corner case
        movementOffset.x = shortestHorizontal;
        movementOffset.y = shortestVertical;
    }

    return movementOffset;
}

void playerBlockCollision(UserPlayer& userPlayer, vector<shared_ptr<Block> >& blocks) {

    playerStaticCollision<Block>(userPlayer, blocks,
                                 [](UserPlayer& player, shared_ptr<Block> block) {

                                    sf::Vector2f movementOffset = calculateCollisionOffset(player.getDestinationBox(), block->getCollisionBox());
                                    player.move(movementOffset);
                                 });
}

void playerPortalCollision(UserPlayer& userPlayer, vector<shared_ptr<Portal> >& portals) {

    playerStaticCollision<Portal>(userPlayer, portals,
                                 [](UserPlayer& player, shared_ptr<Portal> portal) {

                                    player.setInterpolationPosition(portal->getTeleportPosition());
                                    player.setFloor(portal->getDestinationFloor());
                                 });
}

void playerGunGiverCollision(UserPlayer& userPlayer, vector<shared_ptr<GunGiver> >& gunGivers) {

    playerStaticCollision<GunGiver>(userPlayer, gunGivers,
                                 [](UserPlayer& player, shared_ptr<GunGiver> gunGiver) {

                                    gunGiver->handlePlayerCollision(userPlayer);
                                 });
}