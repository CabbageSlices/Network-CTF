#include "UserPlayer.h"
#include "math.h"
#include "Gun.h"

#include <iostream>

using std::vector;
using std::tr1::shared_ptr;
using std::cout;
using std::endl;

UserPlayer::UserPlayer():
    PlayerBase(),
    LEFT_KEY(sf::Keyboard::A),
    RIGHT_KEY(sf::Keyboard::D),
    UP_KEY(sf::Keyboard::W),
    DOWN_KEY(sf::Keyboard::S),
    RELOAD_KEY(sf::Keyboard::R),
    INVALID_INPUT_ID(-1),
    playerId(0),
    velocities(0, 0),
    inputBuffer(),
    inputsToSend(),
    currentInputId(0),
    nextNewInputId(0),
    keystateUpdateTimer(),
    keystateUpdateDelay(sf::milliseconds(60)),
    keystate(),
    healthRecovered(10),
    regenerationTimer(),
    regenerationDelay(sf::seconds(3))
    {

    }

void UserPlayer::handleEvents(sf::Event& event) {

    //convert all events to an input and place them in the input queue to be handled later, and create an input to send to the server
    if(event.type == sf::Event::KeyPressed) {

        if(event.key.code == LEFT_KEY) {

            placeIntoQueue(createInput(PRESS_LEFT));
        }

        if(event.key.code == RIGHT_KEY) {

            placeIntoQueue(createInput(PRESS_RIGHT));
        }

        if(event.key.code == UP_KEY) {

            placeIntoQueue(createInput(PRESS_UP));
        }

        if(event.key.code == DOWN_KEY) {

            placeIntoQueue(createInput(PRESS_DOWN));
        }

        if(event.key.code == RELOAD_KEY) {

            placeIntoQueue(createInput(RELOAD));
        }
    }

    if(event.type == sf::Event::MouseButtonPressed) {

        if(event.mouseButton.button == sf::Mouse::Left) {

            gun->handleButtonPress();
        }
    }

    if(event.type == sf::Event::MouseButtonReleased) {

        if(event.mouseButton.button == sf::Mouse::Left) {

            gun->handleButtonRelease();
        }
    }

    if(event.type == sf::Event::KeyReleased) {

        if(event.key.code == LEFT_KEY) {

            placeIntoQueue(createInput(RELEASE_LEFT));
        }

        if(event.key.code == RIGHT_KEY) {

            placeIntoQueue(createInput(RELEASE_RIGHT));
        }

        if(event.key.code == UP_KEY) {

            placeIntoQueue(createInput(RELEASE_UP));
        }

        if(event.key.code == DOWN_KEY) {

            placeIntoQueue(createInput(RELEASE_DOWN));
        }
    }

    //now get the next input in the queue and handle it
    processInput(getInputToProcess());
}

void UserPlayer::handleStateEvents() {

    keystate.pressedLeft = sf::Keyboard::isKeyPressed(LEFT_KEY);
    keystate.pressedRight = sf::Keyboard::isKeyPressed(RIGHT_KEY);
    keystate.pressedUp = sf::Keyboard::isKeyPressed(UP_KEY);
    keystate.pressedDown = sf::Keyboard::isKeyPressed(DOWN_KEY);
}

void UserPlayer::handleServerUpdate(const State& stateUpdate, const unsigned& destinationFloor, const sf::Uint32& lastConfirmedInputId) {

    //if the first input in queue has an id that is greater than the last confirmed input id it means
    //that the current server update is from the past and should be ignored because the first input in queue is the first
    //input sent to the server that wasn't confirmed and any id less than that is data from the past
    if(inputBuffer.size() > 0 && inputBuffer[0].inputId > lastConfirmedInputId) {

        return;
    }

    //first remove all the old inputs, including the confirmed one because the new position of hte player given by the server
    //is the position of the player after the given input was processed so no need to process it again
    removeConfirmedInputs(lastConfirmedInputId);

    //now that the old inputs have been removed, you have to handle all of the inputs starting from the last input that was processed because the player might be at a different position
    //so the player has to reprocess the inputs to calculate its new state

    currentInputId = lastConfirmedInputId + 1;

    //only let the server set the position if the player respawned because server determines respawn position,
    //or if the player uses a portal because both respawning and portals are handled server side
    bool respawned = (health.getCurrentHealth() == 0 && stateUpdate.health > 0);
    bool usedPortal = currentFloor != destinationFloor;

    if(respawned || usedPortal) {

        cout << stateUpdate.position.x << "     " << stateUpdate.position.y << endl;
        setPosition(stateUpdate.position);
    }

    setFloor(destinationFloor);

    //now load the health from the server update
    setHealth(stateUpdate.health);

    //now load the team
    setTeam(stateUpdate.team);

    //for whatever reason the queued input with the same id as the last confirmed input doesn't get deleted so delete it here if it's still there
    if(inputBuffer.size() > 0) {

        inputBuffer.erase(inputBuffer.begin());
    }

    resetDataTimer();
}

const vector<UserPlayer::Input>& UserPlayer::getInputsToSend() const {

    return inputsToSend;
}

const vector<float>& UserPlayer::getGunshotsToSend() const {

    return gun->getQueuedRotations();
}

bool UserPlayer::shouldSendKeystate() {

    return keystateUpdateTimer.getElapsedTime() > keystateUpdateDelay;
}

UserPlayer::KeyState UserPlayer::getKeystate() const {

    return keystate;
}

void UserPlayer::resetKeystateTimer() {

    keystateUpdateTimer.restart();
}

void UserPlayer::clearGunshotQueue() {

    gun->clearRotations();
}

void UserPlayer::clearInputsToSend() {

    inputsToSend.clear();
}

void UserPlayer::setRotation(const float& newRotation) {

    destinationRotation = newRotation;
    currentRotation = newRotation;
    pastRotation = newRotation;

    updateHitboxRotation();
    gun->updateRotation(currentHitBox.getPosition(), currentRotation);
}

void UserPlayer::updateGun(const float& delta) {

    PlayerBase::updateGun(delta);

    if(gun->mustReload() && canReload()) {

        reload();
    }
}

void UserPlayer::fireGun(const float& angle) {

    gun->fire(angle);
    resetDataTimer();
}

void UserPlayer::regenerateHealth() {

    if(regenerationTimer.getElapsedTime() > regenerationDelay) {

        setHealth(getHealth() + healthRecovered);
        regenerationTimer.restart();
    }
}

void UserPlayer::handleClientInput(Input& clientInput) {

    //input is valid, process it
    processInput(clientInput);

    //update received, restart timer
    resetDataTimer();
}

void UserPlayer::handleClientKeystate(KeyState& state) {

    keystate = state;

    resetDataTimer();
}

void UserPlayer::update(const float& delta, const sf::Vector2f& screenSize) {

    determineMovement();

    ///pastHitBox.setPosition(destinationHitBox.getPosition());

    //set the destination hitbox to the new position so the current hitbox and interpolate towards it over time
    ///destinationHitBox.move(velocities.x * delta, velocities.y * delta);

    sf::Vector2f position = destinationHitBox.getPosition();
    position.x += velocities.x * delta;
    position.y += velocities.y * delta;

    setInterpolationPosition(position);

    updateGun(delta);
}

void UserPlayer::updateRotation(const sf::Vector2f& mousePosition) {

    setRotation(calculateAngle(currentHitBox.getPosition(), mousePosition));
}

void UserPlayer::drawGun(sf::RenderWindow& window, const unsigned& drawingFloor) {
    
    gun->drawAll(window);
}

const float UserPlayer::getHorizontalVelocity() const {

    return 200;
}

const float UserPlayer::getVerticalVelocity() const {

    return 200;
}

const float UserPlayer::getVelocityReduction() const {

    return 0.70;
}

UserPlayer::Input UserPlayer::getInputToProcess() {

    //search for the current input that is being processed
    for(unsigned index = 0; index < inputBuffer.size(); index++)
    {
        if(inputBuffer[index].inputId == currentInputId)
        {
            //input found so handle the input and move onto the next one so next time another input is handled
            currentInputId++;
            return inputBuffer[index];
        }
    }

    //input doesn't exist so create a blank input with an invalid input Id
    Input invalidInput;
    invalidInput.inputId = INVALID_INPUT_ID;
    return invalidInput;
}

void UserPlayer::processInput(const Input& inputToProcess) {

    //if the given input is invalid then don't process
    if(inputToProcess.inputId == INVALID_INPUT_ID) {

        return;
    }

    //set the current keystates input id to this id because it is the latest keystate
    keystate.inputId = inputToProcess.inputId;

    Action action = inputToProcess.action;

    if(action == PRESS_LEFT) {

        keystate.pressedLeft = true;

    } else if(action == PRESS_RIGHT) {

        keystate.pressedRight = true;

    } else if(action == PRESS_UP) {

        keystate.pressedUp = true;

    } else if(action == PRESS_DOWN) {

        keystate.pressedDown = true;

    } else if(action == RELOAD && canReload()) {

        reload();
    }

    if(action == RELEASE_LEFT) {

        keystate.pressedLeft = false;

    } else if(action == RELEASE_RIGHT) {

        keystate.pressedRight = false;

    } else if(action == RELEASE_UP) {

        keystate.pressedUp = false;

    } else if(action == RELEASE_DOWN) {

        keystate.pressedDown = false;
    }

}

void UserPlayer::placeIntoQueue(Input inputToQueue) {

    inputBuffer.push_back(inputToQueue);
    inputsToSend.push_back(inputToQueue);
}

void UserPlayer::removeConfirmedInputs(const sf::Uint32& lastConfirmedInputId) {

    //find the input with the given id and remove all inputs up to and including the given input
    for(unsigned index = 0; index < inputBuffer.size(); index++) {

        if(inputBuffer[index].inputId == lastConfirmedInputId) {

            //erase removes all objects from begin to end, but not including end
            //however the inputBuffer.begin() + index moves the iterator 1 past the range you want to remove
            //so all objects that you want to remove are removed so there is no need to move the iterator again
            inputBuffer.erase(inputBuffer.begin(), inputBuffer.begin() + index);

            //container size changed, index is now invalid
            return;
        }
    }
}

UserPlayer::Input UserPlayer::createInput(const Action& playerAction) {

    Input input;
    input.action = playerAction;
    input.inputId = nextNewInputId;

    nextNewInputId++;

    return input;
}

void UserPlayer::determineMovement() {

    if(keystate.pressedLeft) {

        velocities.x = -getHorizontalVelocity();

    } else if(keystate.pressedRight) {

        velocities.x = getHorizontalVelocity();

    } else {

        velocities.x = 0;
    }

    if(keystate.pressedUp) {

        velocities.y = -getVerticalVelocity();

    } else if(keystate.pressedDown) {

        velocities.y = getHorizontalVelocity();

    } else {

        velocities.y = 0;
    }

    //if playeri s holding flag reduce his velocity
    if(isHoldingFlag()) {

       velocities.x *= getVelocityReduction();
       velocities.y *= getVelocityReduction();
    }
}

bool UserPlayer::canReload() const {

    return gun->canReload();
}

void UserPlayer::reload() {

    gun->reload();
}
